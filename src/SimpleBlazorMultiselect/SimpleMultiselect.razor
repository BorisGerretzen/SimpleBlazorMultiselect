@using Microsoft.JSInterop
@using System.Diagnostics
@inject IJSRuntime JsRuntime
@typeparam TItem
@implements IAsyncDisposable

<div class="dropdown-container w-100 simple-dropdown @(Class ?? "")"
     style="@(string.IsNullOrEmpty(Style) ? "" : Style)"
     @ref="dropdownContainerRef">
    <button class="dropdown-button w-100 text-truncate text-start" type="button"
            id="dropdownMenuButton" @onclick="ToggleDropdown"
            aria-expanded="@isDropdownOpen">
        <span class="dropdown-text">
            @if (SelectedOptions.Count == 0)
            {
                @DefaultText
            }
            else if (SelectedOptionsRenderer == null)
            {
                @string.Join(", ", SelectedOptions.Select(StringSelector))
            }
            else
            {
                @SelectedOptionsRenderer(SelectedOptions)
            }
        </span>
        <span class="dropdown-arrow @(isDropdownOpen ? "open" : "")">&#9662;</span>
    </button>

    @if (isDropdownOpen)
    {
        <div class="dropdown-menu-container w-100">
            @if (CanFilter)
            {
                <div class="filter-container">
                    <div>
                        <input type="text" class="filter-input" placeholder="Filter..."
                               @bind="_filterText" @bind:event="oninput" />
                    </div>
                </div>
            }

            @if (Virtualize)
            {
                <Virtualize Items="FilteredOptions().ToList()" Context="option">
                    @RenderItem(option)
                </Virtualize>
            }
            else
            {
                foreach (var option in FilteredOptions())
                {
                    @RenderItem(option)
                }
            }
        </div>
    }
</div>

@code {
    private string _filterText = "";
    private bool isDropdownOpen = false;
    private ElementReference dropdownContainerRef;
    private DotNetObjectReference<SimpleMultiselect<TItem>>? dotNetHelper;
    private IJSObjectReference? module;
    private IJSObjectReference? clickHandler;

    protected override void OnInitialized()
    {
        dotNetHelper = DotNetObjectReference.Create(this);
    }

    private async Task ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
        if (isDropdownOpen)
        {
            module ??= await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/SimpleBlazorMultiselect/js/simpleMultiselect.js");
            clickHandler = await module.InvokeAsync<IJSObjectReference>("register", dotNetHelper, dropdownContainerRef);
        }
        else
        {
            await CloseDropdown();
        }
    }

    [JSInvokable]
    public async Task CloseDropdown()
    {
        if (clickHandler != null)
        {
            await clickHandler.InvokeVoidAsync("dispose");
            clickHandler = null;
        }
        isDropdownOpen = false;
        await InvokeAsync(StateHasChanged);
    }



    private RenderFragment<TItem> RenderItem => item =>
    @<div class="dropdown-item" @onclick="() => ToggleOption(item)">
        <label @onclick:stopPropagation="true">
            <input type="checkbox" checked="@IsOptionSelected(item)"
                   @onchange="() => ToggleOption(item)" /> @StringSelector(item)
        </label>
    </div>;

    public async ValueTask DisposeAsync()
    {
        if (clickHandler != null)
        {
            await clickHandler.InvokeVoidAsync("dispose");
        }
        if (module != null)
        {
            await module.DisposeAsync();
        }
        dotNetHelper?.Dispose();
    }
}