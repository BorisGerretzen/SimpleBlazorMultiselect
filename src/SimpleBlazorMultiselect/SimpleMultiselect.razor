@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime
@typeparam TItem
@implements IAsyncDisposable

<div class="simple-dropdown @(Standalone || SimpleMultiselectGlobals.Standalone ? "simple-bs-compat" : "") @(Class ?? "")"
     style="@(string.IsNullOrEmpty(Style) ? "" : Style)"
     @ref="_dropdownContainerRef">
    <button class="simple-dropdown-button btn dropdown-toggle" type="button"
            id="@Id"
            @onclick="ToggleDropdown"
            aria-expanded="@IsDropdownOpen">
        <span class="simple-dropdown-text">
            @if (SelectedOptions.Count == 0)
            {
                @DefaultText
            }
            else if (SelectedOptionsRenderer == null)
            {
                @string.Join(", ", SelectedOptions.Select(StringSelector))
            }
            else
            {
                @SelectedOptionsRenderer(SelectedOptions)
            }
        </span>
    </button>


    @if (IsDropdownOpen)
    {
        var options = FilteredOptions();
        <div class="dropdown-menu show">
            @if (CanFilter)
            {
                <div class="simple-filter-container">
                    <input type="text" class="simple-filter-input form-control" placeholder="Filter..."
                           @bind="_filterText" @bind:event="oninput"/>
                </div>
            }

            @if (Virtualize)
            {
                <Virtualize Items="@(options)" Context="option">
                    @RenderItem(option)
                </Virtualize>
            }
            else
            {
                foreach (var option in options)
                {
                    @RenderItem(option)
                }
            }
        </div>
    }
</div>

@code {
    private string _filterText = "";
    internal bool IsDropdownOpen { get; private set; }
    private ElementReference _dropdownContainerRef;
    private DotNetObjectReference<SimpleMultiselect<TItem>>? _dotNetHelper;
    private IJSObjectReference? _module;
    private IJSObjectReference? _clickHandler;

    protected override void OnInitialized()
    {
        _dotNetHelper = DotNetObjectReference.Create(this);
    }

    private async Task ToggleDropdown()
    {
        IsDropdownOpen = !IsDropdownOpen;
        if (IsDropdownOpen)
        {
            _module ??= await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/SimpleBlazorMultiselect/js/simpleMultiselect.js");
            _clickHandler = await _module.InvokeAsync<IJSObjectReference>("register", _dotNetHelper, _dropdownContainerRef);
        }
        else
        {
            await CloseDropdown();
        }
    }

    [JSInvokable]
    public async Task CloseDropdown()
    {
        IsDropdownOpen = false;
        if (_clickHandler != null)
        {
            await _clickHandler.InvokeVoidAsync("dispose");
            _clickHandler = null;
        }

        await InvokeAsync(StateHasChanged);
    }

    private RenderFragment<TItem> RenderItem => item =>
        @<div class="dropdown-item" @onclick="() => ToggleOption(item)">
            <label @onclick:stopPropagation="true">
                <input type="checkbox" checked="@IsOptionSelected(item)"
                       @onchange="() => ToggleOption(item)"/> @StringSelector(item)
            </label>
        </div>;

    public async ValueTask DisposeAsync()
    {
        if (_clickHandler != null)
        {
            await _clickHandler.InvokeVoidAsync("dispose");
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }

        _dotNetHelper?.Dispose();
    }

}